generator client {
  provider = "prisma-client-js"
  // output 줄을 삭제하거나, 아래처럼 프로젝트 루트 기준으로 변경
  // output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUM 정의
enum TeamRole {
  ADMIN
  EDITOR
  VIEWER
}

enum AgentRole {
  SYSTEM
  USER
  ASSISTANT
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum WorkflowStatus {
  RUNNING
  COMPLETED
  FAILED
}

enum TeamLeaderType {
  SINGLE // 하나의 팀장이 전체 상호작용 관리
  MULTI // 각 단계별로 다른 팀장이 상호작용
}

// 사용자 모델
model User {
  id            String              @id @default(uuid())
  email         String              @unique
  name          String?
  password      String // 해시된 비밀번호 저장 (OAuth 사용 시 null 가능)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  workflows     Workflow[] // 사용자가 생성한 워크플로우
  agents        Agent[] // 사용자가 생성한 에이전트
  conversations Conversation[] // 사용자의 대화 기록
  documents     Document[] // 사용자가 업로드한 문서
  teamMembers   TeamMember[] // 사용자가 속한 팀 멤버십
  agentSessions AgentSession[] // 사용자의 에이전트 세션
  executions    WorkflowExecution[] // 사용자의 워크플로우 실행 이력
}

// 팀 모델
model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  brandId     String // 브랜드 ID
  brand       Brand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  workflows   Workflow[]
  agents      Agent[]
  documents   Document[]
}

// 팀 멤버 모델
model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      TeamRole // ENUM 타입으로 변경
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId]) // 한 사용자는 한 팀에 한 번만 속할 수 있음
}

// 워크플로우 모델
model Workflow {
  id             String              @id @default(uuid())
  name           String
  description    String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  userId         String
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId         String? // 추가
  team           Team?               @relation(fields: [teamId], references: [id], onDelete: SetNull) // 추가
  isPublic       Boolean             @default(false)
  config         Json?
  nodes          Node[]
  executions     WorkflowExecution[] // 추가
  teamLeaderType TeamLeaderType      @default(SINGLE) // 싱글/멀티 팀장 구분
  leaderAgentId  String? // SINGLE일 때 팀장 에이전트
  leaderAgent    Agent?              @relation("WorkflowLeader", fields: [leaderAgentId], references: [id])
}

// 워크플로우 실행 이력 모델
model WorkflowExecution {
  id         String         @id @default(uuid())
  workflowId String
  userId     String
  startedAt  DateTime       @default(now())
  endedAt    DateTime?
  status     WorkflowStatus // ENUM 타입으로 변경
  input      Json? // 입력 데이터
  output     Json? // 출력 데이터
  error      String? // 오류 메시지
  logs       Json? // 실행 로그
  workflow   Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 노드 모델
model Node {
  id            String   @id @default(uuid())
  type          String // 노드 유형
  name          String
  position      Json // 노드 위치 정보
  data          Json // 노드 데이터
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  workflowId    String
  workflow      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  inputs        Json? // 입력 연결 정보
  outputs       Json? // 출력 연결 정보
  leaderAgentId String? // 멀티 팀장 모드에서 단계별 팀장 지정
  leaderAgent   Agent?   @relation("NodeLeader", fields: [leaderAgentId], references: [id])
}

// 에이전트 모델
model Agent {
  id                String         @id @default(uuid())
  name              String
  description       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  userId            String
  teamId            String? // 팀 에이전트인 경우 팀 ID
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  team              Team?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  config            Json // 에이전트 설정 (JSON 형식)
  conversations     Conversation[] // 에이전트와의 대화 기록
  sessions          AgentSession[] // 에이전트 세션
  isPublic          Boolean        @default(false)
  identity          Json? // 에이전트 정체성 정보
  role              AgentRole? // ENUM 타입으로 변경
  workflowLeaderFor Workflow[]     @relation("WorkflowLeader")
  nodeLeaderFor     Node[]         @relation("NodeLeader")
  documents         Document[]     @relation("AgentDocuments") // 기존 관계 유지
  parentAgentId     String?  // 추가: 상위(총괄) 에이전트 ID
  parentAgent       Agent?   @relation("AgentParent", fields: [parentAgentId], references: [id])
  childrenAgents    Agent[]  @relation("AgentParent")
  // === 아래 필드만 추가 ===
  ragDocs     String[]    // RAG 문서 배열
  prompt      String?     // 프롬프트(역할)
  model       String?     // AI 모델명
  temperature Float?      // Temperature 값
  type        String?     // leader/worker 등
}

// 에이전트 세션 모델
model AgentSession {
  id        String   @id @default(uuid())
  agentId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  messages  Json // 세션 메시지 이력
  variables Json? // 세션 변수
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 대화 모델
model Conversation {
  id        String    @id @default(uuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agentId   String
  agent     Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  messages  Message[] // 대화 내 메시지들
}

// 메시지 모델
model Message {
  id             String       @id @default(uuid())
  content        String
  role           MessageRole // ENUM 타입으로 변경
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  metadata       Json? // 메시지 메타데이터 (JSON 형식)
  toolName       String?      @db.VarChar(255) // 길이 제한 추가
  toolResults    Json? // 도구 실행 결과 (role이 "tool"인 경우)
}

// 문서 모델
model Document {
  id        String   @id @default(uuid())
  title     String
  content   String
  source    String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String?
  teamId    String?
  brandId   String? // 브랜드 문서 지원
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  brand     Brand?   @relation(fields: [brandId], references: [id], onDelete: SetNull)
  metadata  Json? // 목적, 가이드라인, 용도 등
  relations Json? // 문서 간 관계 (예: { "A": "원인", "B": "결과" })
  embedding Json? // 벡터 임베딩 데이터
  agentId   String? // 추가!
  agent     Agent?   @relation("AgentDocuments", fields: [agentId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  agentId   String
  question  String
  answer    String
  createdAt DateTime @default(now())
}

model Brand {
  id        String     @id @default(uuid())
  name      String
  identity  Json?
  teams     Team[]
  documents Document[] // ← 추가! (Brand가 가진 문서들)
}
